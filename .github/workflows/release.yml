name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23', '1.24']
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run go vet
      run: go vet ./...

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.62.2

    - name: Run golangci-lint
      run: $(go env GOPATH)/bin/golangci-lint run

    - name: Run tests
      run: go test -race ./...

  security:
    name: Security Scan
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Run Gosec Security Scanner
      uses: securego/gosec@v2.22.4
      with:
        args: './...'

  release:
    name: release
    runs-on: ubuntu-latest
    needs: security
    outputs:
      digests: ${{ steps.hash.outputs.digests }}
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Extract version number
      id: version
      run: |
        tag=${GITHUB_REF#refs/tags/}
        version=${tag#v}
        echo "version=$version" >> $GITHUB_OUTPUT

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}

    - name: Download dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        mkdir -p dist
        go build -o dist/${{ matrix.os }}/${{ matrix.arch }}/replbac${{ matrix.os == 'windows' && '.exe' || '' }} ./cmd/replbac
        ls dist/${{ matrix.os }}/${{ matrix.arch }}/replbac${{ matrix.os == 'windows' && '.exe' || '' }} 

    - name: Test binary
      if: matrix.os == 'linux' && matrix.arch == 'amd64'
      run: |
        chmod +x dist/linux/amd64/replbac
        ./dist/linux/amd64/replbac version

    - name: Create archives
      run: |
        dist_dir=dist
        bin_dir=${dist_dir}/${os}/${arch}
        workspace="$(pwd)"
        output_name=replbac-v0.0.1-linux-amd64

        cd "${bin_dir}" 
        if [[ ! "$os" == "windows" ]]; then 
          tar -czf "${dist_dir}/${output_name}.tar.gz" replbac 
        else 
          zip "${dist_dir}/${output_name%.exe}.zip" replbac.exe 
        fi

        rm -rf "${bin_dir}"
        cd "${workspace}"

    - name: Generate checksums and digests
      id: hash
      run: |
        cd dist
        sha256sum * > checksums.txt
        
        # Generate SLSA digests
        echo "digests=$(sha256sum * | base64 -w0)" >> "$GITHUB_OUTPUT"

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # SLSA Level 3 provenance generation
  provenance:
    needs: [release]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
    with:
      base64-subjects: "${{ needs.release.outputs.digests }}"
      upload-assets: true
